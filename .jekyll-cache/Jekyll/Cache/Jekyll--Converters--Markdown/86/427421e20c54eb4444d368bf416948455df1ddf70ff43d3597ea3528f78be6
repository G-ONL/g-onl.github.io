I"À0<p>There are two ways of adding third party scripts.
<a href="#embedding">Embedding</a> is ideal for one-off scripts, e.g. <code class="highlighter-rouge">widgets.js</code> that is part of embedded tweets (see below).
Adding <a href="#global-scripts">global scripts</a> is for scripts that should be loaded on every page.</p>

<h2 class="no_toc" id="table-of-contents">Table of Contents</h2>
<ol id="markdown-toc">
  <li><a href="#embedding" id="markdown-toc-embedding">Embedding</a></li>
  <li><a href="#global-scripts" id="markdown-toc-global-scripts">Global scripts</a></li>
  <li><a href="#async-vs-defer-vs-loadjsdeferred" id="markdown-toc-async-vs-defer-vs-loadjsdeferred"><code class="highlighter-rouge">async</code> vs. <code class="highlighter-rouge">defer</code> vs. <code class="highlighter-rouge">loadJSDeferred</code></a>    <ol>
      <li><a href="#using-loadjsdeferred" id="markdown-toc-using-loadjsdeferred">Using <code class="highlighter-rouge">loadJSDeferred</code></a></li>
    </ol>
  </li>
  <li><a href="#registering-push-state-event-listeners" id="markdown-toc-registering-push-state-event-listeners">Registering push state event listeners</a></li>
  <li><a href="#escape-hatch" id="markdown-toc-escape-hatch">Escape hatch</a></li>
</ol>

<h2 id="embedding">Embedding</h2>
<p>Hydejack supports embedding third party scripts directly inside markdown content. This will work in most cases, except when a script can not be loaded on a page more than once (this will occur when a user navigates to the same page twice).</p>

<p class="message"><strong>NOTE</strong>: Adding ‚Äúraw‚Äù script tags will make the page slow, unless they have the <code class="highlighter-rouge">async</code> or <code class="highlighter-rouge">defer</code> attribute set. For more see <a href="#async-vs-defer-vs-loadjsdeferred">below</a>.</p>

<p>Example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">"//platform.twitter.com/widgets.js"</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;blockquote</span> <span class="na">class=</span><span class="s">"twitter-tweet"</span> <span class="na">data-lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">lang=</span><span class="s">"en"</span> <span class="na">dir=</span><span class="s">"ltr"</span><span class="nt">&gt;</span>
    The next version of Hydejack (v6.3.0) will allow embedding 3rd party scripts,
    like the one that comes with this tweet for example.
  <span class="nt">&lt;/p&gt;</span>
  <span class="ni">&amp;mdash;</span> Florian Klampfer (@qwtel)
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://twitter.com/qwtel/status/871098943505039362"</span><span class="nt">&gt;</span>June 3, 2017<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div>

<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">The next version of Hydejack (v6.3.0) will allow embedding 3rd party scripts, like the one that comes with this tweet for example.</p>&mdash; Florian Klampfer (@qwtel) <a href="https://twitter.com/qwtel/status/871098943505039362">June 3, 2017</a></blockquote>

<h2 id="global-scripts">Global scripts</h2>
<p>If you have scripts that should be included on every page you can add them globally by
opening (or creating) <code class="highlighter-rouge">_includes/my-scripts.html</code> and adding them like you normally would:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file: _includes/my-scripts.html --&gt;</span>
<span class="nt">&lt;script
  </span><span class="na">src=</span><span class="s">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span>
  <span class="na">integrity=</span><span class="s">"sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g="</span>
  <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">my-scripts.html</code> will be included at the end of the <code class="highlighter-rouge">body</code> tag.</p>

<h2 id="async-vs-defer-vs-loadjsdeferred"><code class="highlighter-rouge">async</code> vs. <code class="highlighter-rouge">defer</code> vs. <code class="highlighter-rouge">loadJSDeferred</code></h2>
<p>I highly recommended setting the <code class="highlighter-rouge">async</code> or <code class="highlighter-rouge">defer</code> attribute on your external scripts,
otherwise the entire page can‚Äôt finish loading until a separate HTTP request is completed, which can take a long time (this applies to the web in general, not just Hydejack).</p>

<p>Specific to Hydejack is the <code class="highlighter-rouge">loadJSDeferred</code> function, which is used to load Hydejack‚Äôs own scripts.
It has various advantages which are detailed in the table below.</p>

<table class="flip-table-small">
  <thead>
    <tr>
      <th style="text-align: left">¬†</th>
      <th style="text-align: left"><code class="highlighter-rouge">async</code></th>
      <th style="text-align: left"><code class="highlighter-rouge">defer</code></th>
      <th style="text-align: left"><code class="highlighter-rouge">loadJSDeferred</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Download</td>
      <td style="text-align: left">immediately</td>
      <td style="text-align: left">immediately</td>
      <td style="text-align: left">after document <code class="highlighter-rouge">load</code></td>
    </tr>
    <tr>
      <td style="text-align: left">Execution</td>
      <td style="text-align: left">asap</td>
      <td style="text-align: left">before document <code class="highlighter-rouge">load</code></td>
      <td style="text-align: left">after document <code class="highlighter-rouge">load</code></td>
    </tr>
    <tr>
      <td style="text-align: left">Ordering</td>
      <td style="text-align: left">none</td>
      <td style="text-align: left">preserves order</td>
      <td style="text-align: left">via callback nesting</td>
    </tr>
    <tr>
      <td style="text-align: left">Support</td>
      <td style="text-align: left">IE8+</td>
      <td style="text-align: left">IE9+</td>
      <td style="text-align: left">IE5+ (Hydejack only)</td>
    </tr>
  </tbody>
</table>

<h3 id="using-loadjsdeferred">Using <code class="highlighter-rouge">loadJSDeferred</code></h3>
<p>Using <code class="highlighter-rouge">loadJSDeferred</code> is slightly more work than just adding <code class="highlighter-rouge">defer</code> to a script tag.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="nx">loadJSDeferred</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;script-src&gt;</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// </span><span class="o">&lt;</span><span class="nx">callback</span> <span class="nx">code</span><span class="o">&gt;</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>If you have scripts that depend on other scripts, you can nest calls, e.g.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="nx">loadJSDeferred</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;script-src-1&gt;</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// </span><span class="o">&lt;</span><span class="nx">callback</span> <span class="nx">script</span> <span class="mi">1</span><span class="o">&gt;</span>
    <span class="nx">loadJSDeferred</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;script-src-2&gt;</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="c1">// </span><span class="o">&lt;</span><span class="nx">callback</span> <span class="nx">script</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="o">&gt;</span>
      <span class="nx">loadJSDeferred</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;script-src-3&gt;</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// </span><span class="o">&lt;</span><span class="nx">callback</span> <span class="nx">script</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="o">&gt;</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="registering-push-state-event-listeners">Registering push state event listeners</h2>
<p>When embedding scripts globally you might want to run some init code after each page load. However, the problem with push state-based page loads is that the <code class="highlighter-rouge">load</code> event won‚Äôt fire again. Luckily, Hydejack‚Äôs push state component exposes an event that you can listen to instead.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file: _includes/my-scripts.html --&gt;</span>
<span class="nt">&lt;script&gt;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">hy-push-state</span><span class="dl">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">hy-push-state-load</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// </span><span class="o">&lt;</span><span class="nx">your</span> <span class="nx">init</span> <span class="nx">code</span><span class="o">&gt;</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>Note that the above code must only run once, so include it in your <code class="highlighter-rouge">my-scripts.html</code>.</p>

<dl>
  <dt><code class="highlighter-rouge">hy-push-state-start</code></dt>
  <dd>Occurs after clicking a link.</dd>
  <dt><code class="highlighter-rouge">hy-push-state-ready</code></dt>
  <dd>Animation fished and response has been parsed, ready to swap out the content.</dd>
  <dt><code class="highlighter-rouge">hy-push-state-after</code></dt>
  <dd>The old content has been replaced with the new content.</dd>
  <dt><code class="highlighter-rouge">hy-push-state-progress</code></dt>
  <dd>Special case when animation is finished, but no response from server has arrived yet.
This is when the loading spinner will appear.</dd>
  <dt><code class="highlighter-rouge">hy-push-state-load</code></dt>
  <dd>All embedded script tags have been inserted into the document and have finished loading.</dd>
</dl>

<h2 id="escape-hatch">Escape hatch</h2>
<p>If you can‚Äôt make an external script work with Hydejack‚Äôs push state approach to page loading,
you can disable push state by adding to your config file:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># file: _config.yml</span>
<span class="na">hydejack</span><span class="pi">:</span>
  <span class="na">no_push_state</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p class="read-more">Continue with <a href="/docs/7.5.2/build/" class="heading flip-title">Build</a></p>
:ET